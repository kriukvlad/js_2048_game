{"version":3,"sources":["modules/Game.class.js","scripts/main.js"],"names":["Game","initialState","size","score","status","statuses","IDLE","map","row","state","addRandomTile","PLAYING","emptyCells","forEach","everyRow","rowIndex","cell","colIndex","push","col","length","randomIndex","Math","floor","random","tileNewValue","previousState","newState","moveScore","r","filter","mergedRow","c","mergedValue","boardsAreEqual","updateScore","checkStatus","unshift","newColumn","newScore","previousBoard","newBoard","hasEmptyCell","canMove","WIN","LOSE","module","exports","require","game","button","document","querySelector","messageStart","messageLose","messageWin","gameScore","gameField","updateBoard","innerHTML","getState","rowElement","createElement","classList","add","cellElement","textContent","appendChild","getScore","updateStatus","currentStatus","getStatus","remove","addEventListener","contains","start","restart","e","keyProcessed","preventDefault","key","moveUp","moveDown","moveRight","moveLeft"],"mappings":"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","file":"main.9db9708f.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nclass Game {\n  static get statuses() {\n    return {\n      IDLE: 'idle',\n      PLAYING: 'playing',\n      WIN: 'win',\n      LOSE: 'lose',\n    };\n  }\n\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.size = 4;\n    this.score = 0;\n    this.status = Game.statuses.IDLE;\n    this.initialState = initialState.map((row) => [...row]);\n    this.state = initialState.map((row) => [...row]);\n  }\n\n  start() {\n    this.addRandomTile();\n    this.addRandomTile();\n    this.status = Game.statuses.PLAYING;\n  }\n\n  restart() {\n    this.state = this.initialState.map((row) => [...row]);\n    this.score = 0;\n    this.status = Game.statuses.IDLE;\n  }\n\n  addRandomTile() {\n    const emptyCells = [];\n\n    this.state.forEach((everyRow, rowIndex) => {\n      everyRow.forEach((cell, colIndex) => {\n        if (cell === 0) {\n          emptyCells.push({ row: rowIndex, col: colIndex });\n        }\n      });\n    });\n\n    if (emptyCells.length === 0) {\n      return;\n    }\n\n    const randomIndex = Math.floor(Math.random() * emptyCells.length);\n    const { row, col } = emptyCells[randomIndex];\n    const tileNewValue = Math.random() < 0.9 ? 2 : 4;\n\n    this.state[row][col] = tileNewValue;\n  }\n\n  moveLeft() {\n    if (this.status !== Game.statuses.PLAYING) {\n      return;\n    }\n\n    const previousState = this.state.map((row) => [...row]);\n    const newState = [];\n    let moveScore = 0;\n\n    for (let r = 0; r < this.size; r++) {\n      const row = this.state[r].filter((cell) => cell !== 0);\n      const mergedRow = [];\n\n      for (let c = 0; c < row.length; c++) {\n        if (c + 1 < row.length && row[c] === row[c + 1]) {\n          const mergedValue = row[c] * 2;\n\n          mergedRow.push(mergedValue);\n          moveScore += mergedValue;\n          c++;\n        } else {\n          mergedRow.push(row[c]);\n        }\n      }\n\n      while (mergedRow.length < this.size) {\n        mergedRow.push(0);\n      }\n\n      newState.push(mergedRow);\n    }\n\n    if (!this.boardsAreEqual(previousState, newState)) {\n      this.state = newState;\n      this.updateScore(moveScore);\n      this.addRandomTile();\n      this.checkStatus();\n    }\n  }\n\n  moveRight() {\n    if (this.status !== Game.statuses.PLAYING) {\n      return;\n    }\n\n    const previousState = this.state.map((row) => [...row]);\n    const newState = [];\n    let moveScore = 0;\n\n    for (let r = 0; r < this.size; r++) {\n      const row = this.state[r].filter((cell) => cell !== 0);\n\n      const mergedRow = [];\n\n      for (let c = row.length - 1; c >= 0; c--) {\n        if (c - 1 >= 0 && row[c] === row[c - 1]) {\n          const mergedValue = row[c] * 2;\n\n          mergedRow.unshift(mergedValue);\n          moveScore += mergedValue;\n          c--;\n        } else {\n          mergedRow.unshift(row[c]);\n        }\n      }\n\n      while (mergedRow.length < this.size) {\n        mergedRow.unshift(0);\n      }\n\n      newState.push(mergedRow);\n    }\n\n    if (!this.boardsAreEqual(previousState, newState)) {\n      this.state = newState;\n      this.updateScore(moveScore);\n      this.addRandomTile();\n      this.checkStatus();\n    }\n  }\n\n  moveUp() {\n    if (this.status === Game.statuses.PLAYING) {\n      const previousState = this.state.map((row) => [...row]);\n\n      for (let col = 0; col < this.size; col++) {\n        const newColumn = [];\n\n        for (let row = 0; row < this.size; row++) {\n          if (this.state[row][col] !== 0) {\n            newColumn.push(this.state[row][col]);\n          }\n        }\n\n        while (newColumn.length < this.size) {\n          newColumn.push(0);\n        }\n\n        for (let row = 0; row < this.size; row++) {\n          this.state[row][col] = newColumn[row];\n        }\n      }\n\n      for (let col = 0; col < this.size; col++) {\n        const newColumn = [];\n        let row = 0;\n\n        while (row < this.size) {\n          if (\n            row < this.size - 1 &&\n            this.state[row][col] === this.state[row + 1][col]\n          ) {\n            newColumn.push(this.state[row][col] * 2);\n            this.updateScore(this.state[row][col] * 2);\n            row += 2;\n          } else {\n            newColumn.push(this.state[row][col]);\n            row++;\n          }\n        }\n\n        while (newColumn.length < this.size) {\n          newColumn.push(0);\n        }\n\n        for (let r = 0; r < this.size; r++) {\n          this.state[r][col] = newColumn[r];\n        }\n      }\n\n      if (!this.boardsAreEqual(previousState, this.state)) {\n        this.addRandomTile();\n        this.checkStatus();\n      }\n    }\n  }\n\n  moveDown() {\n    if (this.status === Game.statuses.PLAYING) {\n      const previousState = this.state.map((row) => [...row]);\n\n      for (let col = 0; col < this.size; col++) {\n        const newColumn = [];\n\n        for (let row = 0; row < this.size; row++) {\n          if (this.state[row][col] !== 0) {\n            newColumn.push(this.state[row][col]);\n          }\n        }\n\n        while (newColumn.length < this.size) {\n          newColumn.unshift(0);\n        }\n\n        for (let row = 0; row < this.size; row++) {\n          this.state[row][col] = newColumn[row];\n        }\n      }\n\n      for (let col = 0; col < this.size; col++) {\n        const newColumn = [];\n        let row = this.size - 1;\n\n        while (row >= 0) {\n          if (row > 0 && this.state[row][col] === this.state[row - 1][col]) {\n            newColumn.unshift(this.state[row][col] * 2);\n            this.updateScore(this.state[row][col] * 2);\n            row -= 2;\n          } else {\n            newColumn.unshift(this.state[row][col]);\n            row--;\n          }\n        }\n\n        while (newColumn.length < this.size) {\n          newColumn.unshift(0);\n        }\n\n        for (let r = 0; r < this.size; r++) {\n          this.state[r][col] = newColumn[r];\n        }\n      }\n\n      if (!this.boardsAreEqual(previousState, this.state)) {\n        this.addRandomTile();\n        this.checkStatus();\n      }\n    }\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  updateScore(newScore) {\n    this.score += newScore;\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  boardsAreEqual(previousBoard, newBoard) {\n    for (let row = 0; row < previousBoard.length; row++) {\n      for (let col = 0; col < previousBoard[row].length; col++) {\n        if (previousBoard[row][col] !== newBoard[row][col]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  checkStatus() {\n    let hasEmptyCell = false;\n    let canMove = false;\n\n    for (let r = 0; r < 4; r++) {\n      for (let c = 0; c < 4; c++) {\n        if (this.state[r][c] === 2048) {\n          this.status = Game.statuses.WIN;\n\n          return;\n        }\n\n        if (this.state[r][c] === 0) {\n          hasEmptyCell = true;\n        }\n\n        if (\n          (r < 3 && this.state[r][c] === this.state[r + 1][c]) ||\n          (c < 3 && this.state[r][c] === this.state[r][c + 1])\n        ) {\n          canMove = true;\n        }\n      }\n    }\n\n    if (!hasEmptyCell && !canMove) {\n      this.status = Game.statuses.LOSE;\n    }\n  }\n}\n\nmodule.exports = Game;\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst button = document.querySelector('.button');\nconst messageStart = document.querySelector('.message-start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst gameScore = document.querySelector('.game-score');\nconst gameField = document.querySelector('.game-field');\n\nfunction updateBoard() {\n  gameField.innerHTML = '';\n\n  game.getState().forEach((row) => {\n    const rowElement = document.createElement('tr');\n\n    rowElement.classList.add('field-row');\n\n    row.forEach((cell) => {\n      const cellElement = document.createElement('td');\n\n      cellElement.classList.add('field-cell');\n\n      if (cell > 0) {\n        cellElement.classList.add(`field-cell--${cell}`);\n      }\n      cellElement.textContent = cell !== 0 ? cell : '';\n      rowElement.appendChild(cellElement);\n    });\n\n    gameField.appendChild(rowElement);\n  });\n}\n\nfunction updateScore() {\n  gameScore.innerHTML = game.getScore();\n}\n\nfunction updateStatus() {\n  messageWin.classList.add('hidden');\n  messageLose.classList.add('hidden');\n\n  const currentStatus = game.getStatus();\n\n  if (currentStatus === Game.statuses.WIN) {\n    messageWin.classList.remove('hidden');\n  } else if (currentStatus === Game.statuses.LOSE) {\n    messageLose.classList.remove('hidden');\n  }\n}\n\nupdateScore();\n\nbutton.addEventListener('click', () => {\n  if (button.classList.contains('start')) {\n    game.start();\n    updateBoard();\n    updateScore();\n\n    button.classList.remove('start');\n    button.classList.add('restart');\n    button.textContent = 'Restart';\n\n    messageStart.classList.add('hidden');\n  } else if (button.classList.contains('restart')) {\n    button.classList.remove('restart');\n    button.classList.add('start');\n    button.textContent = 'Start';\n    messageLose.classList.add('hidden');\n    messageWin.classList.add('hidden');\n    game.restart();\n    updateBoard();\n    updateScore();\n  }\n});\n\ndocument.addEventListener('keydown', (e) => {\n  if (game.getStatus() !== Game.statuses.PLAYING) {\n    return;\n  }\n\n  let keyProcessed = true;\n\n  e.preventDefault();\n\n  switch (e.key) {\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    default:\n      keyProcessed = false;\n      break;\n  }\n\n  if (keyProcessed) {\n    updateScore();\n    updateBoard();\n    updateStatus();\n  }\n});\n"]}